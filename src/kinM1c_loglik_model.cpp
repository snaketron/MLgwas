// Code generated by Stan version 2.19.1

#include <stan/model/model_header.hpp>

namespace kinM1c_loglik_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "stan_files/kinM1c_loglik.stan");
    reader.add_event(109, 107, "end", "stan_files/kinM1c_loglik.stan");
    return reader;
}

class kinM1c_loglik_model : public prob_grad {
private:
        int N;
        int Ntq;
        int Ntd;
        int Ns;
        int Nk;
        std::vector<std::vector<double> > Yq;
        std::vector<std::vector<int> > Yd;
        std::vector<vector_d> X;
        std::vector<int> K;
public:
    kinM1c_loglik_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    kinM1c_loglik_model(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "kinM1c_loglik_model_namespace::kinM1c_loglik_model";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];

            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "Ntq", "int", context__.to_vec());
            Ntq = int(0);
            vals_i__ = context__.vals_i("Ntq");
            pos__ = 0;
            Ntq = vals_i__[pos__++];

            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "Ntd", "int", context__.to_vec());
            Ntd = int(0);
            vals_i__ = context__.vals_i("Ntd");
            pos__ = 0;
            Ntd = vals_i__[pos__++];

            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "Ns", "int", context__.to_vec());
            Ns = int(0);
            vals_i__ = context__.vals_i("Ns");
            pos__ = 0;
            Ns = vals_i__[pos__++];

            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "Nk", "int", context__.to_vec());
            Nk = int(0);
            vals_i__ = context__.vals_i("Nk");
            pos__ = 0;
            Nk = vals_i__[pos__++];

            current_statement_begin__ = 7;
            validate_non_negative_index("Yq", "N", N);
            validate_non_negative_index("Yq", "Ntq", Ntq);
            context__.validate_dims("data initialization", "Yq", "double", context__.to_vec(N,Ntq));
            Yq = std::vector<std::vector<double> >(N, std::vector<double>(Ntq, double(0)));
            vals_r__ = context__.vals_r("Yq");
            pos__ = 0;
            size_t Yq_k_0_max__ = N;
            size_t Yq_k_1_max__ = Ntq;
            for (size_t k_1__ = 0; k_1__ < Yq_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < Yq_k_0_max__; ++k_0__) {
                    Yq[k_0__][k_1__] = vals_r__[pos__++];
                }
            }

            current_statement_begin__ = 8;
            validate_non_negative_index("Yd", "N", N);
            validate_non_negative_index("Yd", "Ntd", Ntd);
            context__.validate_dims("data initialization", "Yd", "int", context__.to_vec(N,Ntd));
            Yd = std::vector<std::vector<int> >(N, std::vector<int>(Ntd, int(0)));
            vals_i__ = context__.vals_i("Yd");
            pos__ = 0;
            size_t Yd_k_0_max__ = N;
            size_t Yd_k_1_max__ = Ntd;
            for (size_t k_1__ = 0; k_1__ < Yd_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < Yd_k_0_max__; ++k_0__) {
                    Yd[k_0__][k_1__] = vals_i__[pos__++];
                }
            }

            current_statement_begin__ = 9;
            validate_non_negative_index("X", "Ns", Ns);
            validate_non_negative_index("X", "N", N);
            context__.validate_dims("data initialization", "X", "vector_d", context__.to_vec(N,Ns));
            X = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(N, Eigen::Matrix<double, Eigen::Dynamic, 1>(Ns));
            vals_r__ = context__.vals_r("X");
            pos__ = 0;
            size_t X_j_1_max__ = Ns;
            size_t X_k_0_max__ = N;
            for (size_t j_1__ = 0; j_1__ < X_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < X_k_0_max__; ++k_0__) {
                    X[k_0__](j_1__) = vals_r__[pos__++];
                }
            }

            current_statement_begin__ = 10;
            validate_non_negative_index("K", "N", N);
            context__.validate_dims("data initialization", "K", "int", context__.to_vec(N));
            K = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            size_t K_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < K_k_0_max__; ++k_0__) {
                K[k_0__] = vals_i__[pos__++];
            }


            // initialize transformed data variables
            // execute transformed data statements

            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 14;
            validate_non_negative_index("alpha", "(Ntq + Ntd)", (Ntq + Ntd));
            num_params_r__ += (Ntq + Ntd);
            current_statement_begin__ = 15;
            validate_non_negative_index("grand_mu_beta", "(Ntq + Ntd)", (Ntq + Ntd));
            validate_non_negative_index("grand_mu_beta", "1", 1);
            num_params_r__ += ((Ntq + Ntd) * 1);
            current_statement_begin__ = 16;
            validate_non_negative_index("sigma", "Ntq", Ntq);
            num_params_r__ += Ntq;
            current_statement_begin__ = 17;
            validate_non_negative_index("sigma_beta", "(Ntq + Ntd)", (Ntq + Ntd));
            num_params_r__ += (Ntq + Ntd);
            current_statement_begin__ = 18;
            validate_non_negative_index("nu", "(Ntq + Ntd)", (Ntq + Ntd));
            num_params_r__ += (Ntq + Ntd);
            current_statement_begin__ = 19;
            validate_non_negative_index("nu_help", "(Ntq + Ntd)", (Ntq + Ntd));
            num_params_r__ += (Ntq + Ntd);
            current_statement_begin__ = 20;
            validate_non_negative_index("z", "Nk", Nk);
            validate_non_negative_index("z", "Ns", Ns);
            validate_non_negative_index("z", "(Ntq + Ntd)", (Ntq + Ntd));
            num_params_r__ += ((Nk * Ns) * (Ntq + Ntd));
            current_statement_begin__ = 21;
            validate_non_negative_index("grand_z", "(Ntq + Ntd)", (Ntq + Ntd));
            validate_non_negative_index("grand_z", "Ns", Ns);
            num_params_r__ += ((Ntq + Ntd) * Ns);
            current_statement_begin__ = 22;
            validate_non_negative_index("L_rho", "(Ntq + Ntd)", (Ntq + Ntd));
            validate_non_negative_index("L_rho", "(Ntq + Ntd)", (Ntq + Ntd));
            num_params_r__ += (((Ntq + Ntd) * ((Ntq + Ntd) - 1)) / 2);
            current_statement_begin__ = 23;
            validate_non_negative_index("Lk_rho", "Nk", Nk);
            validate_non_negative_index("Lk_rho", "Nk", Nk);
            num_params_r__ += ((Nk * (Nk - 1)) / 2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~kinM1c_loglik_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        current_statement_begin__ = 14;
        if (!(context__.contains_r("alpha")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0U;
        validate_non_negative_index("alpha", "(Ntq + Ntd)", (Ntq + Ntd));
        context__.validate_dims("parameter initialization", "alpha", "vector_d", context__.to_vec((Ntq + Ntd)));
        Eigen::Matrix<double, Eigen::Dynamic, 1> alpha((Ntq + Ntd));
        size_t alpha_j_1_max__ = (Ntq + Ntd);
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            alpha(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(alpha);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 15;
        if (!(context__.contains_r("grand_mu_beta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable grand_mu_beta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("grand_mu_beta");
        pos__ = 0U;
        validate_non_negative_index("grand_mu_beta", "(Ntq + Ntd)", (Ntq + Ntd));
        validate_non_negative_index("grand_mu_beta", "1", 1);
        context__.validate_dims("parameter initialization", "grand_mu_beta", "matrix_d", context__.to_vec((Ntq + Ntd),1));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> grand_mu_beta((Ntq + Ntd), 1);
        size_t grand_mu_beta_j_2_max__ = 1;
        size_t grand_mu_beta_j_1_max__ = (Ntq + Ntd);
        for (size_t j_2__ = 0; j_2__ < grand_mu_beta_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < grand_mu_beta_j_1_max__; ++j_1__) {
                grand_mu_beta(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(grand_mu_beta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable grand_mu_beta: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 16;
        if (!(context__.contains_r("sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        validate_non_negative_index("sigma", "Ntq", Ntq);
        context__.validate_dims("parameter initialization", "sigma", "vector_d", context__.to_vec(Ntq));
        Eigen::Matrix<double, Eigen::Dynamic, 1> sigma(Ntq);
        size_t sigma_j_1_max__ = Ntq;
        for (size_t j_1__ = 0; j_1__ < sigma_j_1_max__; ++j_1__) {
            sigma(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, sigma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 17;
        if (!(context__.contains_r("sigma_beta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_beta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_beta");
        pos__ = 0U;
        validate_non_negative_index("sigma_beta", "(Ntq + Ntd)", (Ntq + Ntd));
        context__.validate_dims("parameter initialization", "sigma_beta", "vector_d", context__.to_vec((Ntq + Ntd)));
        Eigen::Matrix<double, Eigen::Dynamic, 1> sigma_beta((Ntq + Ntd));
        size_t sigma_beta_j_1_max__ = (Ntq + Ntd);
        for (size_t j_1__ = 0; j_1__ < sigma_beta_j_1_max__; ++j_1__) {
            sigma_beta(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, sigma_beta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_beta: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 18;
        if (!(context__.contains_r("nu")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable nu missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("nu");
        pos__ = 0U;
        validate_non_negative_index("nu", "(Ntq + Ntd)", (Ntq + Ntd));
        context__.validate_dims("parameter initialization", "nu", "vector_d", context__.to_vec((Ntq + Ntd)));
        Eigen::Matrix<double, Eigen::Dynamic, 1> nu((Ntq + Ntd));
        size_t nu_j_1_max__ = (Ntq + Ntd);
        for (size_t j_1__ = 0; j_1__ < nu_j_1_max__; ++j_1__) {
            nu(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, nu);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable nu: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 19;
        if (!(context__.contains_r("nu_help")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable nu_help missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("nu_help");
        pos__ = 0U;
        validate_non_negative_index("nu_help", "(Ntq + Ntd)", (Ntq + Ntd));
        context__.validate_dims("parameter initialization", "nu_help", "vector_d", context__.to_vec((Ntq + Ntd)));
        Eigen::Matrix<double, Eigen::Dynamic, 1> nu_help((Ntq + Ntd));
        size_t nu_help_j_1_max__ = (Ntq + Ntd);
        for (size_t j_1__ = 0; j_1__ < nu_help_j_1_max__; ++j_1__) {
            nu_help(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(2, nu_help);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable nu_help: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 20;
        if (!(context__.contains_r("z")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable z missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("z");
        pos__ = 0U;
        validate_non_negative_index("z", "Nk", Nk);
        validate_non_negative_index("z", "Ns", Ns);
        validate_non_negative_index("z", "(Ntq + Ntd)", (Ntq + Ntd));
        context__.validate_dims("parameter initialization", "z", "matrix_d", context__.to_vec((Ntq + Ntd),Nk,Ns));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> > z((Ntq + Ntd), Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(Nk, Ns));
        size_t z_j_2_max__ = Ns;
        size_t z_j_1_max__ = Nk;
        size_t z_k_0_max__ = (Ntq + Ntd);
        for (size_t j_2__ = 0; j_2__ < z_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < z_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < z_k_0_max__; ++k_0__) {
                    z[k_0__](j_1__, j_2__) = vals_r__[pos__++];
                }
            }
        }
        size_t z_i_0_max__ = (Ntq + Ntd);
        for (size_t i_0__ = 0; i_0__ < z_i_0_max__; ++i_0__) {
            try {
                writer__.matrix_unconstrain(z[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable z: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 21;
        if (!(context__.contains_r("grand_z")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable grand_z missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("grand_z");
        pos__ = 0U;
        validate_non_negative_index("grand_z", "(Ntq + Ntd)", (Ntq + Ntd));
        validate_non_negative_index("grand_z", "Ns", Ns);
        context__.validate_dims("parameter initialization", "grand_z", "matrix_d", context__.to_vec((Ntq + Ntd),Ns));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> grand_z((Ntq + Ntd), Ns);
        size_t grand_z_j_2_max__ = Ns;
        size_t grand_z_j_1_max__ = (Ntq + Ntd);
        for (size_t j_2__ = 0; j_2__ < grand_z_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < grand_z_j_1_max__; ++j_1__) {
                grand_z(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(grand_z);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable grand_z: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 22;
        if (!(context__.contains_r("L_rho")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable L_rho missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("L_rho");
        pos__ = 0U;
        validate_non_negative_index("L_rho", "(Ntq + Ntd)", (Ntq + Ntd));
        validate_non_negative_index("L_rho", "(Ntq + Ntd)", (Ntq + Ntd));
        context__.validate_dims("parameter initialization", "L_rho", "matrix_d", context__.to_vec((Ntq + Ntd),(Ntq + Ntd)));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> L_rho((Ntq + Ntd), (Ntq + Ntd));
        size_t L_rho_j_2_max__ = (Ntq + Ntd);
        size_t L_rho_j_1_max__ = (Ntq + Ntd);
        for (size_t j_2__ = 0; j_2__ < L_rho_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L_rho_j_1_max__; ++j_1__) {
                L_rho(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.cholesky_factor_corr_unconstrain(L_rho);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable L_rho: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 23;
        if (!(context__.contains_r("Lk_rho")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable Lk_rho missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("Lk_rho");
        pos__ = 0U;
        validate_non_negative_index("Lk_rho", "Nk", Nk);
        validate_non_negative_index("Lk_rho", "Nk", Nk);
        context__.validate_dims("parameter initialization", "Lk_rho", "matrix_d", context__.to_vec(Nk,Nk));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Lk_rho(Nk, Nk);
        size_t Lk_rho_j_2_max__ = Nk;
        size_t Lk_rho_j_1_max__ = Nk;
        for (size_t j_2__ = 0; j_2__ < Lk_rho_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Lk_rho_j_1_max__; ++j_1__) {
                Lk_rho(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.cholesky_factor_corr_unconstrain(Lk_rho);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable Lk_rho: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);

            // model parameters
            current_statement_begin__ = 14;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> alpha;
            (void) alpha;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha = in__.vector_constrain((Ntq + Ntd), lp__);
            else
                alpha = in__.vector_constrain((Ntq + Ntd));

            current_statement_begin__ = 15;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> grand_mu_beta;
            (void) grand_mu_beta;  // dummy to suppress unused var warning
            if (jacobian__)
                grand_mu_beta = in__.matrix_constrain((Ntq + Ntd), 1, lp__);
            else
                grand_mu_beta = in__.matrix_constrain((Ntq + Ntd), 1);

            current_statement_begin__ = 16;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma;
            (void) sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma = in__.vector_lb_constrain(0, Ntq, lp__);
            else
                sigma = in__.vector_lb_constrain(0, Ntq);

            current_statement_begin__ = 17;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma_beta;
            (void) sigma_beta;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_beta = in__.vector_lb_constrain(0, (Ntq + Ntd), lp__);
            else
                sigma_beta = in__.vector_lb_constrain(0, (Ntq + Ntd));

            current_statement_begin__ = 18;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> nu;
            (void) nu;  // dummy to suppress unused var warning
            if (jacobian__)
                nu = in__.vector_lb_constrain(0, (Ntq + Ntd), lp__);
            else
                nu = in__.vector_lb_constrain(0, (Ntq + Ntd));

            current_statement_begin__ = 19;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> nu_help;
            (void) nu_help;  // dummy to suppress unused var warning
            if (jacobian__)
                nu_help = in__.vector_lb_constrain(2, (Ntq + Ntd), lp__);
            else
                nu_help = in__.vector_lb_constrain(2, (Ntq + Ntd));

            current_statement_begin__ = 20;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> > z;
            size_t z_d_0_max__ = (Ntq + Ntd);
            z.reserve(z_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < z_d_0_max__; ++d_0__) {
                if (jacobian__)
                    z.push_back(in__.matrix_constrain(Nk, Ns, lp__));
                else
                    z.push_back(in__.matrix_constrain(Nk, Ns));
            }

            current_statement_begin__ = 21;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> grand_z;
            (void) grand_z;  // dummy to suppress unused var warning
            if (jacobian__)
                grand_z = in__.matrix_constrain((Ntq + Ntd), Ns, lp__);
            else
                grand_z = in__.matrix_constrain((Ntq + Ntd), Ns);

            current_statement_begin__ = 22;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> L_rho;
            (void) L_rho;  // dummy to suppress unused var warning
            if (jacobian__)
                L_rho = in__.cholesky_factor_corr_constrain((Ntq + Ntd), lp__);
            else
                L_rho = in__.cholesky_factor_corr_constrain((Ntq + Ntd));

            current_statement_begin__ = 23;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Lk_rho;
            (void) Lk_rho;  // dummy to suppress unused var warning
            if (jacobian__)
                Lk_rho = in__.cholesky_factor_corr_constrain(Nk, lp__);
            else
                Lk_rho = in__.cholesky_factor_corr_constrain(Nk);

            // transformed parameters
            current_statement_begin__ = 27;
            validate_non_negative_index("beta", "Ns", Ns);
            validate_non_negative_index("beta", "Nk", Nk);
            validate_non_negative_index("beta", "(Ntq + Ntd)", (Ntq + Ntd));
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> > beta((Ntq + Ntd), Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>(Ns, Nk));
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta, DUMMY_VAR__);

            current_statement_begin__ = 28;
            validate_non_negative_index("mu_beta", "(Ntq + Ntd)", (Ntq + Ntd));
            validate_non_negative_index("mu_beta", "Ns", Ns);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> mu_beta((Ntq + Ntd), Ns);
            stan::math::initialize(mu_beta, DUMMY_VAR__);
            stan::math::fill(mu_beta, DUMMY_VAR__);

            // transformed parameters block statements
            current_statement_begin__ = 31;
            for (int s = 1; s <= Ns; ++s) {

                current_statement_begin__ = 32;
                stan::model::assign(mu_beta, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list())), 
                            add(stan::model::rvalue(grand_mu_beta, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "grand_mu_beta"), elt_multiply(stan::math::sqrt(elt_divide(nu_help, nu)), multiply(L_rho, stan::model::rvalue(grand_z, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list())), "grand_z")))), 
                            "assigning variable mu_beta");
            }
            current_statement_begin__ = 36;
            for (int t = 1; t <= (Ntq + Ntd); ++t) {

                current_statement_begin__ = 37;
                for (int s = 1; s <= Ns; ++s) {
                    {
                    current_statement_begin__ = 40;
                    validate_non_negative_index("temp", "Nk", Nk);
                    Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> temp(Nk);
                    stan::math::initialize(temp, DUMMY_VAR__);
                    stan::math::fill(temp, DUMMY_VAR__);
                    stan::math::assign(temp,add(get_base1(mu_beta, t, s, "mu_beta", 1), multiply(get_base1(sigma_beta, t, "sigma_beta", 1), multiply(Lk_rho, stan::model::rvalue(get_base1(z, t, "z", 1), stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list())), "z[t]")))));


                    current_statement_begin__ = 41;
                    for (int k = 1; k <= Nk; ++k) {

                        current_statement_begin__ = 42;
                        stan::model::assign(beta, 
                                    stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(s), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()))), 
                                    get_base1(temp, k, "temp", 1), 
                                    "assigning variable beta");
                    }
                    }
                }
            }

            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            current_statement_begin__ = 27;
            size_t beta_k_0_max__ = (Ntq + Ntd);
            size_t beta_j_1_max__ = Ns;
            size_t beta_j_2_max__ = Nk;
            for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                    for (size_t j_2__ = 0; j_2__ < beta_j_2_max__; ++j_2__) {
                        if (stan::math::is_uninitialized(beta[k_0__](j_1__, j_2__))) {
                            std::stringstream msg__;
                            msg__ << "Undefined transformed parameter: beta" << "[" << k_0__ << "]" << "(" << j_1__ << ", " << j_2__ << ")";
                            stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable beta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                        }
                    }
                }
            }
            current_statement_begin__ = 28;
            size_t mu_beta_j_1_max__ = (Ntq + Ntd);
            size_t mu_beta_j_2_max__ = Ns;
            for (size_t j_1__ = 0; j_1__ < mu_beta_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < mu_beta_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(mu_beta(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: mu_beta" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable mu_beta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }

            // model body

            current_statement_begin__ = 51;
            for (int i = 1; i <= N; ++i) {

                current_statement_begin__ = 52;
                if (as_bool(logical_gt(Ntq, 0))) {

                    current_statement_begin__ = 53;
                    for (int t = 1; t <= Ntq; ++t) {

                        current_statement_begin__ = 54;
                        lp_accum__.add(normal_log<propto__>(get_base1(get_base1(Yq, i, "Yq", 1), t, "Yq", 2), add(get_base1(alpha, t, "alpha", 1), elt_multiply(get_base1(X, i, "X", 1), stan::model::rvalue(get_base1(beta, t, "beta", 1), stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(get_base1(K, i, "K", 1)), stan::model::nil_index_list())), "beta[t]"))), get_base1(sigma, t, "sigma", 1)));
                    }
                }
                current_statement_begin__ = 57;
                if (as_bool(logical_gt(Ntd, 0))) {

                    current_statement_begin__ = 58;
                    for (int d = 1; d <= Ntd; ++d) {

                        current_statement_begin__ = 59;
                        lp_accum__.add(bernoulli_logit_log<propto__>(get_base1(get_base1(Yd, i, "Yd", 1), d, "Yd", 2), add(get_base1(alpha, (d + Ntq), "alpha", 1), elt_multiply(get_base1(X, i, "X", 1), stan::model::rvalue(get_base1(beta, (d + Ntq), "beta", 1), stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(get_base1(K, i, "K", 1)), stan::model::nil_index_list())), "beta[(d + Ntq)]")))));
                    }
                }
            }
            current_statement_begin__ = 64;
            lp_accum__.add(student_t_log<propto__>(alpha, 1, 0, 100));
            current_statement_begin__ = 65;
            lp_accum__.add(student_t_log<propto__>(to_vector(grand_mu_beta), 1, 0, 10));
            current_statement_begin__ = 67;
            lp_accum__.add(cauchy_log<propto__>(sigma, 0, 5));
            current_statement_begin__ = 68;
            lp_accum__.add(cauchy_log<propto__>(sigma_beta, 0, 5));
            current_statement_begin__ = 69;
            lp_accum__.add(exponential_log<propto__>(subtract(nu_help, 2), 0.5));
            current_statement_begin__ = 70;
            lp_accum__.add(chi_square_log<propto__>(nu, nu_help));
            current_statement_begin__ = 72;
            for (int t = 1; t <= (Ntq + Ntd); ++t) {

                current_statement_begin__ = 73;
                lp_accum__.add(normal_log<propto__>(to_vector(get_base1(z, t, "z", 1)), 0, 1));
                current_statement_begin__ = 74;
                lp_accum__.add(normal_log<propto__>(stan::model::rvalue(grand_z, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "grand_z"), 0, 1));
            }
            current_statement_begin__ = 77;
            lp_accum__.add(lkj_corr_cholesky_log<propto__>(L_rho, 2));
            current_statement_begin__ = 78;
            lp_accum__.add(lkj_corr_cholesky_log<propto__>(Lk_rho, 2));

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("alpha");
        names__.push_back("grand_mu_beta");
        names__.push_back("sigma");
        names__.push_back("sigma_beta");
        names__.push_back("nu");
        names__.push_back("nu_help");
        names__.push_back("z");
        names__.push_back("grand_z");
        names__.push_back("L_rho");
        names__.push_back("Lk_rho");
        names__.push_back("beta");
        names__.push_back("mu_beta");
        names__.push_back("log_lik2");
        names__.push_back("log_lik");
        names__.push_back("rho");
        names__.push_back("rho_k");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back((Ntq + Ntd));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((Ntq + Ntd));
        dims__.push_back(1);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Ntq);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((Ntq + Ntd));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((Ntq + Ntd));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((Ntq + Ntd));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((Ntq + Ntd));
        dims__.push_back(Nk);
        dims__.push_back(Ns);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((Ntq + Ntd));
        dims__.push_back(Ns);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((Ntq + Ntd));
        dims__.push_back((Ntq + Ntd));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Nk);
        dims__.push_back(Nk);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((Ntq + Ntd));
        dims__.push_back(Ns);
        dims__.push_back(Nk);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((Ntq + Ntd));
        dims__.push_back(Ns);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((Ntq + Ntd));
        dims__.push_back(N);
        dims__.push_back(Ns);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back((Ntq + Ntd));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((Ntq + Ntd));
        dims__.push_back((Ntq + Ntd));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Nk);
        dims__.push_back(Nk);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "kinM1c_loglik_model_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning

        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> alpha = in__.vector_constrain((Ntq + Ntd));
        size_t alpha_j_1_max__ = (Ntq + Ntd);
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            vars__.push_back(alpha(j_1__));
        }

        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> grand_mu_beta = in__.matrix_constrain((Ntq + Ntd), 1);
        size_t grand_mu_beta_j_2_max__ = 1;
        size_t grand_mu_beta_j_1_max__ = (Ntq + Ntd);
        for (size_t j_2__ = 0; j_2__ < grand_mu_beta_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < grand_mu_beta_j_1_max__; ++j_1__) {
                vars__.push_back(grand_mu_beta(j_1__, j_2__));
            }
        }

        Eigen::Matrix<double, Eigen::Dynamic, 1> sigma = in__.vector_lb_constrain(0, Ntq);
        size_t sigma_j_1_max__ = Ntq;
        for (size_t j_1__ = 0; j_1__ < sigma_j_1_max__; ++j_1__) {
            vars__.push_back(sigma(j_1__));
        }

        Eigen::Matrix<double, Eigen::Dynamic, 1> sigma_beta = in__.vector_lb_constrain(0, (Ntq + Ntd));
        size_t sigma_beta_j_1_max__ = (Ntq + Ntd);
        for (size_t j_1__ = 0; j_1__ < sigma_beta_j_1_max__; ++j_1__) {
            vars__.push_back(sigma_beta(j_1__));
        }

        Eigen::Matrix<double, Eigen::Dynamic, 1> nu = in__.vector_lb_constrain(0, (Ntq + Ntd));
        size_t nu_j_1_max__ = (Ntq + Ntd);
        for (size_t j_1__ = 0; j_1__ < nu_j_1_max__; ++j_1__) {
            vars__.push_back(nu(j_1__));
        }

        Eigen::Matrix<double, Eigen::Dynamic, 1> nu_help = in__.vector_lb_constrain(2, (Ntq + Ntd));
        size_t nu_help_j_1_max__ = (Ntq + Ntd);
        for (size_t j_1__ = 0; j_1__ < nu_help_j_1_max__; ++j_1__) {
            vars__.push_back(nu_help(j_1__));
        }

        std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> > z;
        size_t z_d_0_max__ = (Ntq + Ntd);
        z.reserve(z_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < z_d_0_max__; ++d_0__) {
            z.push_back(in__.matrix_constrain(Nk, Ns));
        }
        size_t z_j_2_max__ = Ns;
        size_t z_j_1_max__ = Nk;
        size_t z_k_0_max__ = (Ntq + Ntd);
        for (size_t j_2__ = 0; j_2__ < z_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < z_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < z_k_0_max__; ++k_0__) {
                    vars__.push_back(z[k_0__](j_1__, j_2__));
                }
            }
        }

        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> grand_z = in__.matrix_constrain((Ntq + Ntd), Ns);
        size_t grand_z_j_2_max__ = Ns;
        size_t grand_z_j_1_max__ = (Ntq + Ntd);
        for (size_t j_2__ = 0; j_2__ < grand_z_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < grand_z_j_1_max__; ++j_1__) {
                vars__.push_back(grand_z(j_1__, j_2__));
            }
        }

        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> L_rho = in__.cholesky_factor_corr_constrain((Ntq + Ntd));
        size_t L_rho_j_2_max__ = (Ntq + Ntd);
        size_t L_rho_j_1_max__ = (Ntq + Ntd);
        for (size_t j_2__ = 0; j_2__ < L_rho_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L_rho_j_1_max__; ++j_1__) {
                vars__.push_back(L_rho(j_1__, j_2__));
            }
        }

        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Lk_rho = in__.cholesky_factor_corr_constrain(Nk);
        size_t Lk_rho_j_2_max__ = Nk;
        size_t Lk_rho_j_1_max__ = Nk;
        for (size_t j_2__ = 0; j_2__ < Lk_rho_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Lk_rho_j_1_max__; ++j_1__) {
                vars__.push_back(Lk_rho(j_1__, j_2__));
            }
        }

        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        if (!include_tparams__ && !include_gqs__) return;

        try {
            // declare and define transformed parameters
            current_statement_begin__ = 27;
            validate_non_negative_index("beta", "Ns", Ns);
            validate_non_negative_index("beta", "Nk", Nk);
            validate_non_negative_index("beta", "(Ntq + Ntd)", (Ntq + Ntd));
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> > beta((Ntq + Ntd), Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(Ns, Nk));
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta, DUMMY_VAR__);

            current_statement_begin__ = 28;
            validate_non_negative_index("mu_beta", "(Ntq + Ntd)", (Ntq + Ntd));
            validate_non_negative_index("mu_beta", "Ns", Ns);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> mu_beta((Ntq + Ntd), Ns);
            stan::math::initialize(mu_beta, DUMMY_VAR__);
            stan::math::fill(mu_beta, DUMMY_VAR__);

            // do transformed parameters statements
            current_statement_begin__ = 31;
            for (int s = 1; s <= Ns; ++s) {

                current_statement_begin__ = 32;
                stan::model::assign(mu_beta, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list())), 
                            add(stan::model::rvalue(grand_mu_beta, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "grand_mu_beta"), elt_multiply(stan::math::sqrt(elt_divide(nu_help, nu)), multiply(L_rho, stan::model::rvalue(grand_z, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list())), "grand_z")))), 
                            "assigning variable mu_beta");
            }
            current_statement_begin__ = 36;
            for (int t = 1; t <= (Ntq + Ntd); ++t) {

                current_statement_begin__ = 37;
                for (int s = 1; s <= Ns; ++s) {
                    {
                    current_statement_begin__ = 40;
                    validate_non_negative_index("temp", "Nk", Nk);
                    Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> temp(Nk);
                    stan::math::initialize(temp, DUMMY_VAR__);
                    stan::math::fill(temp, DUMMY_VAR__);
                    stan::math::assign(temp,add(get_base1(mu_beta, t, s, "mu_beta", 1), multiply(get_base1(sigma_beta, t, "sigma_beta", 1), multiply(Lk_rho, stan::model::rvalue(get_base1(z, t, "z", 1), stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list())), "z[t]")))));


                    current_statement_begin__ = 41;
                    for (int k = 1; k <= Nk; ++k) {

                        current_statement_begin__ = 42;
                        stan::model::assign(beta, 
                                    stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(s), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()))), 
                                    get_base1(temp, k, "temp", 1), 
                                    "assigning variable beta");
                    }
                    }
                }
            }

            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            // write transformed parameters
            if (include_tparams__) {
                size_t beta_j_2_max__ = Nk;
                size_t beta_j_1_max__ = Ns;
                size_t beta_k_0_max__ = (Ntq + Ntd);
                for (size_t j_2__ = 0; j_2__ < beta_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                        for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                            vars__.push_back(beta[k_0__](j_1__, j_2__));
                        }
                    }
                }
                size_t mu_beta_j_2_max__ = Ns;
                size_t mu_beta_j_1_max__ = (Ntq + Ntd);
                for (size_t j_2__ = 0; j_2__ < mu_beta_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < mu_beta_j_1_max__; ++j_1__) {
                        vars__.push_back(mu_beta(j_1__, j_2__));
                    }
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 82;
            validate_non_negative_index("log_lik2", "N", N);
            validate_non_negative_index("log_lik2", "Ns", Ns);
            validate_non_negative_index("log_lik2", "(Ntq + Ntd)", (Ntq + Ntd));
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> > log_lik2((Ntq + Ntd), Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, Ns));
            stan::math::initialize(log_lik2, DUMMY_VAR__);
            stan::math::fill(log_lik2, DUMMY_VAR__);

            current_statement_begin__ = 83;
            validate_non_negative_index("log_lik", "N", N);
            validate_non_negative_index("log_lik", "(Ntq + Ntd)", (Ntq + Ntd));
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> log_lik(N, (Ntq + Ntd));
            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik, DUMMY_VAR__);

            current_statement_begin__ = 84;
            validate_non_negative_index("rho", "(Ntq + Ntd)", (Ntq + Ntd));
            validate_non_negative_index("rho", "(Ntq + Ntd)", (Ntq + Ntd));
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> rho((Ntq + Ntd), (Ntq + Ntd));
            stan::math::initialize(rho, DUMMY_VAR__);
            stan::math::fill(rho, DUMMY_VAR__);

            current_statement_begin__ = 85;
            validate_non_negative_index("rho_k", "Nk", Nk);
            validate_non_negative_index("rho_k", "Nk", Nk);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> rho_k(Nk, Nk);
            stan::math::initialize(rho_k, DUMMY_VAR__);
            stan::math::fill(rho_k, DUMMY_VAR__);

            // generated quantities statements
            current_statement_begin__ = 86;
            stan::math::assign(rho, multiply_lower_tri_self_transpose(L_rho));
            current_statement_begin__ = 87;
            stan::math::assign(rho_k, multiply_lower_tri_self_transpose(Lk_rho));
            current_statement_begin__ = 89;
            for (int i = 1; i <= N; ++i) {

                current_statement_begin__ = 90;
                for (int s = 1; s <= Ns; ++s) {

                    current_statement_begin__ = 91;
                    if (as_bool(logical_gt(Ntq, 0))) {

                        current_statement_begin__ = 92;
                        for (int t = 1; t <= Ntq; ++t) {

                            current_statement_begin__ = 93;
                            stan::model::assign(log_lik2, 
                                        stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()))), 
                                        normal_log(get_base1(get_base1(Yq, i, "Yq", 1), t, "Yq", 2), (get_base1(alpha, t, "alpha", 1) + (get_base1(get_base1(X, i, "X", 1), s, "X", 2) * get_base1(get_base1(beta, t, "beta", 1), s, get_base1(K, i, "K", 1), "beta", 2))), get_base1(sigma, t, "sigma", 1)), 
                                        "assigning variable log_lik2");
                        }
                    }
                    current_statement_begin__ = 96;
                    if (as_bool(logical_gt(Ntd, 0))) {

                        current_statement_begin__ = 97;
                        for (int d = 1; d <= Ntd; ++d) {

                            current_statement_begin__ = 98;
                            stan::model::assign(log_lik2, 
                                        stan::model::cons_list(stan::model::index_uni((d + Ntq)), stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()))), 
                                        bernoulli_logit_log(get_base1(get_base1(Yd, i, "Yd", 1), d, "Yd", 2), (get_base1(alpha, (d + Ntq), "alpha", 1) + (get_base1(get_base1(X, i, "X", 1), s, "X", 2) * get_base1(get_base1(beta, (d + Ntq), "beta", 1), s, get_base1(K, i, "K", 1), "beta", 2)))), 
                                        "assigning variable log_lik2");
                        }
                    }
                }
                current_statement_begin__ = 103;
                for (int t = 1; t <= (Ntq + Ntd); ++t) {

                    current_statement_begin__ = 104;
                    stan::model::assign(log_lik, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), 
                                mean(stan::model::rvalue(get_base1(log_lik2, t, "log_lik2", 1), stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "log_lik2[t]")), 
                                "assigning variable log_lik");
                }
            }

            // validate, write generated quantities
            current_statement_begin__ = 82;
            size_t log_lik2_j_2_max__ = Ns;
            size_t log_lik2_j_1_max__ = N;
            size_t log_lik2_k_0_max__ = (Ntq + Ntd);
            for (size_t j_2__ = 0; j_2__ < log_lik2_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < log_lik2_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < log_lik2_k_0_max__; ++k_0__) {
                        vars__.push_back(log_lik2[k_0__](j_1__, j_2__));
                    }
                }
            }

            current_statement_begin__ = 83;
            size_t log_lik_j_2_max__ = (Ntq + Ntd);
            size_t log_lik_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < log_lik_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
                    vars__.push_back(log_lik(j_1__, j_2__));
                }
            }

            current_statement_begin__ = 84;
            stan::math::check_corr_matrix(function__, "rho", rho);

            size_t rho_j_2_max__ = (Ntq + Ntd);
            size_t rho_j_1_max__ = (Ntq + Ntd);
            for (size_t j_2__ = 0; j_2__ < rho_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < rho_j_1_max__; ++j_1__) {
                    vars__.push_back(rho(j_1__, j_2__));
                }
            }

            current_statement_begin__ = 85;
            stan::math::check_corr_matrix(function__, "rho_k", rho_k);

            size_t rho_k_j_2_max__ = Nk;
            size_t rho_k_j_1_max__ = Nk;
            for (size_t j_2__ = 0; j_2__ < rho_k_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < rho_k_j_1_max__; ++j_1__) {
                    vars__.push_back(rho_k(j_1__, j_2__));
                }
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "kinM1c_loglik_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t alpha_j_1_max__ = (Ntq + Ntd);
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t grand_mu_beta_j_2_max__ = 1;
        size_t grand_mu_beta_j_1_max__ = (Ntq + Ntd);
        for (size_t j_2__ = 0; j_2__ < grand_mu_beta_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < grand_mu_beta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "grand_mu_beta" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t sigma_j_1_max__ = Ntq;
        for (size_t j_1__ = 0; j_1__ < sigma_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_beta_j_1_max__ = (Ntq + Ntd);
        for (size_t j_1__ = 0; j_1__ < sigma_beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t nu_j_1_max__ = (Ntq + Ntd);
        for (size_t j_1__ = 0; j_1__ < nu_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "nu" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t nu_help_j_1_max__ = (Ntq + Ntd);
        for (size_t j_1__ = 0; j_1__ < nu_help_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "nu_help" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t z_j_2_max__ = Ns;
        size_t z_j_1_max__ = Nk;
        size_t z_k_0_max__ = (Ntq + Ntd);
        for (size_t j_2__ = 0; j_2__ < z_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < z_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < z_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "z" << '.' << k_0__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        size_t grand_z_j_2_max__ = Ns;
        size_t grand_z_j_1_max__ = (Ntq + Ntd);
        for (size_t j_2__ = 0; j_2__ < grand_z_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < grand_z_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "grand_z" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t L_rho_j_2_max__ = (Ntq + Ntd);
        size_t L_rho_j_1_max__ = (Ntq + Ntd);
        for (size_t j_2__ = 0; j_2__ < L_rho_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L_rho_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "L_rho" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t Lk_rho_j_2_max__ = Nk;
        size_t Lk_rho_j_1_max__ = Nk;
        for (size_t j_2__ = 0; j_2__ < Lk_rho_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Lk_rho_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Lk_rho" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t beta_j_2_max__ = Nk;
            size_t beta_j_1_max__ = Ns;
            size_t beta_k_0_max__ = (Ntq + Ntd);
            for (size_t j_2__ = 0; j_2__ < beta_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                        param_name_stream__.str(std::string());
                        param_name_stream__ << "beta" << '.' << k_0__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                        param_names__.push_back(param_name_stream__.str());
                    }
                }
            }
            size_t mu_beta_j_2_max__ = Ns;
            size_t mu_beta_j_1_max__ = (Ntq + Ntd);
            for (size_t j_2__ = 0; j_2__ < mu_beta_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < mu_beta_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "mu_beta" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }

        if (!include_gqs__) return;
        size_t log_lik2_j_2_max__ = Ns;
        size_t log_lik2_j_1_max__ = N;
        size_t log_lik2_k_0_max__ = (Ntq + Ntd);
        for (size_t j_2__ = 0; j_2__ < log_lik2_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < log_lik2_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < log_lik2_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "log_lik2" << '.' << k_0__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        size_t log_lik_j_2_max__ = (Ntq + Ntd);
        size_t log_lik_j_1_max__ = N;
        for (size_t j_2__ = 0; j_2__ < log_lik_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_lik" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t rho_j_2_max__ = (Ntq + Ntd);
        size_t rho_j_1_max__ = (Ntq + Ntd);
        for (size_t j_2__ = 0; j_2__ < rho_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < rho_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "rho" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t rho_k_j_2_max__ = Nk;
        size_t rho_k_j_1_max__ = Nk;
        for (size_t j_2__ = 0; j_2__ < rho_k_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < rho_k_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "rho_k" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t alpha_j_1_max__ = (Ntq + Ntd);
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t grand_mu_beta_j_2_max__ = 1;
        size_t grand_mu_beta_j_1_max__ = (Ntq + Ntd);
        for (size_t j_2__ = 0; j_2__ < grand_mu_beta_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < grand_mu_beta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "grand_mu_beta" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t sigma_j_1_max__ = Ntq;
        for (size_t j_1__ = 0; j_1__ < sigma_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_beta_j_1_max__ = (Ntq + Ntd);
        for (size_t j_1__ = 0; j_1__ < sigma_beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t nu_j_1_max__ = (Ntq + Ntd);
        for (size_t j_1__ = 0; j_1__ < nu_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "nu" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t nu_help_j_1_max__ = (Ntq + Ntd);
        for (size_t j_1__ = 0; j_1__ < nu_help_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "nu_help" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t z_j_2_max__ = Ns;
        size_t z_j_1_max__ = Nk;
        size_t z_k_0_max__ = (Ntq + Ntd);
        for (size_t j_2__ = 0; j_2__ < z_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < z_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < z_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "z" << '.' << k_0__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        size_t grand_z_j_2_max__ = Ns;
        size_t grand_z_j_1_max__ = (Ntq + Ntd);
        for (size_t j_2__ = 0; j_2__ < grand_z_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < grand_z_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "grand_z" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t L_rho_j_1_max__ = (((Ntq + Ntd) * ((Ntq + Ntd) - 1)) / 2);
        for (size_t j_1__ = 0; j_1__ < L_rho_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "L_rho" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t Lk_rho_j_1_max__ = ((Nk * (Nk - 1)) / 2);
        for (size_t j_1__ = 0; j_1__ < Lk_rho_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Lk_rho" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t beta_j_2_max__ = Nk;
            size_t beta_j_1_max__ = Ns;
            size_t beta_k_0_max__ = (Ntq + Ntd);
            for (size_t j_2__ = 0; j_2__ < beta_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                        param_name_stream__.str(std::string());
                        param_name_stream__ << "beta" << '.' << k_0__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                        param_names__.push_back(param_name_stream__.str());
                    }
                }
            }
            size_t mu_beta_j_2_max__ = Ns;
            size_t mu_beta_j_1_max__ = (Ntq + Ntd);
            for (size_t j_2__ = 0; j_2__ < mu_beta_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < mu_beta_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "mu_beta" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }

        if (!include_gqs__) return;
        size_t log_lik2_j_2_max__ = Ns;
        size_t log_lik2_j_1_max__ = N;
        size_t log_lik2_k_0_max__ = (Ntq + Ntd);
        for (size_t j_2__ = 0; j_2__ < log_lik2_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < log_lik2_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < log_lik2_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "log_lik2" << '.' << k_0__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        size_t log_lik_j_2_max__ = (Ntq + Ntd);
        size_t log_lik_j_1_max__ = N;
        for (size_t j_2__ = 0; j_2__ < log_lik_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_lik" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t rho_j_1_max__ = (((Ntq + Ntd) * ((Ntq + Ntd) - 1)) / 2);
        for (size_t j_1__ = 0; j_1__ < rho_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rho" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t rho_k_j_1_max__ = ((Nk * (Nk - 1)) / 2);
        for (size_t j_1__ = 0; j_1__ < rho_k_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rho_k" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }

}; // model

}  // namespace

typedef kinM1c_loglik_model_namespace::kinM1c_loglik_model stan_model;

